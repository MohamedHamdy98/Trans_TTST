# Stage 1: Build stage with all dependencies
FROM nvidia/cuda:11.7.1-cudnn8-runtime-ubuntu20.04 as build

# Set environment variables for the build process
ENV LANG=C.UTF-8 \
    LC_ALL=C.UTF-8 \
    PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1

# Add deadsnakes PPA to get Python 3.10 and its related packages
RUN apt-get update && apt-get install -y \
    software-properties-common && \
    add-apt-repository ppa:deadsnakes/ppa && \
    apt-get update

# Install necessary build dependencies and Python 3.10
RUN apt-get install -y \
    build-essential \
    curl \
    python3.10 \
    python3.10-dev \
    python3.10-distutils \
    pkg-config \
    libcairo2-dev \
    libglib2.0-dev \
    && rm -rf /var/lib/apt/lists/*

# Ensure python3 points to python3.10
RUN update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.10 1

# Upgrade pip for Python 3.10
RUN curl -sS https://bootstrap.pypa.io/get-pip.py | python3

# Copy the requirements file first to leverage Docker cache
COPY requirements.txt /app/requirements.txt

# Install Python dependencies
RUN pip install --no-cache-dir -r /app/requirements.txt && \
    pip check && \
    rm -rf /root/.cache/pip

# Stage 2: Final stage with runtime dependencies only
FROM nvidia/cuda:11.7.1-cudnn8-runtime-ubuntu20.04

# Set environment variables
ENV LANG=C.UTF-8 \
    LC_ALL=C.UTF-8 \
    PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    DEBIAN_FRONTEND=noninteractive

# Add deadsnakes PPA and install Python 3.10 for the final stage
RUN apt-get update && apt-get install -y \
    software-properties-common && \
    add-apt-repository ppa:deadsnakes/ppa && \
    apt-get update && apt-get install -y \
    ffmpeg \
    libsndfile1 \
    python3.10 \
    python3.10-distutils \
    pkg-config \
    libcairo2-dev \
    libglib2.0-dev \
    && rm -rf /var/lib/apt/lists/*

# Ensure python3 points to python3.10
RUN update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.10 1

# Upgrade pip for Python 3.10
RUN curl -sS https://bootstrap.pypa.io/get-pip.py | python3

# Copy the installed dependencies from the build stage
COPY --from=build /usr/local/lib/python3.10 /usr/local/lib/python3.10
COPY --from=build /usr/local/bin /usr/local/bin

# Copy the FastAPI application files
COPY . /app
WORKDIR /app

# Ensure Python is installed and CUDA is available for torch and torchaudio
RUN python3 -c "import torch; assert torch.cuda.is_available(), 'CUDA not available'"

# Expose the FastAPI port
EXPOSE 5001

# Healthcheck to ensure the app is running
HEALTHCHECK --interval=30s --timeout=5s --retries=3 CMD curl --fail http://localhost:5001/ || exit 1

# Command to run the FastAPI app with uvicorn
CMD ["uvicorn", "app_fast:app", "--host", "0.0.0.0", "--port", "5001"]
